  jsoncpp.cpp
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(266): warning C4005: “_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES”: 宏重定义
  d:\windows kits\10\include\10.0.17763.0\ucrt\corecrt.h(453): note: 参见“_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES”的前一个定义
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.h(1582): warning C26495: Variable 'Json::Reader::ErrorInfo::token_' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.h(1438): warning C26495: Variable 'Json::Reader::StructuredError::offset_start' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(1201): warning C26495: Variable 'Json::OurReader::ErrorInfo::token_' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(1150): warning C26495: Variable 'Json::OurReader::StructuredError::offset_start' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2593): warning C6386: 写入到“newString”时缓冲区溢出: 可写大小为“length+1”个字节，但可能写入了“length”个字节。
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2721): warning C26495: Variable 'Json::Value::CZString::<anonymous-tag>::storage_' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2723): warning C26495: Variable 'Json::Value::CZString::<anonymous-tag>::index_' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2732): warning C26495: Variable 'Json::Value::CZString::<anonymous-tag>::index_' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2749): warning C26495: Variable 'Json::Value::CZString::<anonymous-tag>::storage_' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2749): warning C26439: This kind of function may not throw. Declare it 'noexcept' (f.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2777): warning C26439: This kind of function may not throw. Declare it 'noexcept' (f.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2837): warning C26495: Variable 'Json::Value::value_' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2928): warning C26495: Variable 'Json::Value::value_' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2935): warning C26495: Variable 'Json::Value::value_' is uninitialized. Always initialize a member variable (type.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(2935): warning C26439: This kind of function may not throw. Declare it 'noexcept' (f.6).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(4281): warning C26450: Arithmetic overflow: '+' operation causes overflow at compile time. Use a wider type to store the operands (io.1).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(4468): warning C26451: Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).
d:\code\github\firstgold_pricecalculator\fgpc_main\firstgold_pricecalculator\jsoncpp.cpp(4468): warning C26451: Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).
